///////////////////////////////////////
/*--------SENTINEL2 LEVEL2A----------*/
///////////////////////////////////////

/*----------Study Area------------*/
var Lagos = Lagos.geometry();
Map.centerObject(Lagos,10);
Map.addLayer(Lagos,{},"Lagos")

/*-------------Raw sentinel_2A---------*/
var Raw_sentinel_2A=ee.ImageCollection("COPERNICUS/S2_SR")
.filterBounds(Lagos)
.first()
.clip(Lagos);
var visparg= { min:0, max:2500};//visualization parameter
print(Raw_sentinel_2A,"Raw_sentinel_2A")
Map.addLayer(Raw_sentinel_2A.select("B1","B2","B3","B4","B5","B6","B7","B8","B9","B11","B12","AOT"),visparg,'Raw_sentinel_2A',false)

/*-------Filtering data-------*/
var sentinel_2A=ee.ImageCollection("COPERNICUS/S2_SR")
.filterBounds(Lagos)
.filterDate('2018-01-01','2018-12-31')
.filterMetadata("CLOUDY_PIXEL_PERCENTAGE","less_than",10)
.sort('CLOUDY_PIXEL_PERCENTAGE')
.median()
.clip(Lagos)
print(sentinel_2A,"FILTERED IMAGE")
var visualization ={gain:'0.1 ,0.1 ,0.1',scale:7}
Map.addLayer(sentinel_2A.select("B4","B3","B2"),visualization,'True_colour_sentinel_2A')


/*----------TRAINING THE CLASSIFER---------*/
var training_points = water.merge(forest).merge(buildings).merge(wetland)
print(training_points, 'training_points')
var Bands_selection=["B4","B3","B2"];
//overlay
var training =sentinel_2A.select(Bands_selection).sampleRegions({
  collection:training_points,
  properties:['landcover'],
  scale:30
})
print(training,"training")
Export.table.toAsset({
  collection: training,
  description: 'trainingasset',
  assetId: 'trainingasset'
});


///SPLITS:Training(75%) & Testing samples(25%).
var Total_samples=training.randomColumn('random')
var training_samples=Total_samples.filter(ee.Filter.lessThan('random',0.75))
print(training_samples,"Training Samples")
var validation_samples=Total_samples.filter(ee.Filter.greaterThanOrEquals('random',0.75))
print(validation_samples,"Validation_Samples")

/*---------------RANDOM FOREST CLASSIFER-------------------*/
// var classifier = ee.Classifier.smileRandomForest(numberOfTrees, variablesPerSplit, minLeafPopulation, bagFraction, maxNodes, seed)
var classifier=ee.Classifier.smileRandomForest(10).train({
features:training_samples,
classProperty:'landcover',
inputProperties:Bands_selection
})
var classified=sentinel_2A.select(Bands_selection).classify(classifier);
var palette = [
  'blue', //water(0)
  'green', //forest(1)
  'black',//buildings(2)
  '90ee90'//wetland(3)
    ];
Map.addLayer(classified,{min: 0, max: 3,palette: palette},"classification");
//validation_classifer.
var Validation_classifier=ee.Classifier.smileRandomForest(10).train({
features:validation_samples,
classProperty:'landcover',
inputProperties:Bands_selection
})

var confusionMatrix=ee.ConfusionMatrix(validation_samples.classify(Validation_classifier)
                    .errorMatrix({
                      actual:'landcover',
                      predicted:'classification'
                    }))
print(confusionMatrix,"confusionMatrix")
print(confusionMatrix.accuracy(),"overall_Accuracy")

//-------------Estimation of Area------------------/
var names = ['water','forest','urban']
var count = classified.eq([0,1,2])
var total = count.multiply(ee.Image.pixelArea()).divide(1e6).rename(names);
var area = total.reduceRegion({
 reducer:ee.Reducer.sum(),
  geometry:Lagos,
  scale:1,
 maxPixels: 1e12,
 bestEffort:true
});
print ('Area in (kmÂ²):', area)





